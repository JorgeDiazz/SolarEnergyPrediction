// Mocks generated by Mockito 5.4.3 from annotations
// in solar_energy_prediction/test/features/map/presentation/view_models/mocks/view_models_mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i10;
import 'package:location/location.dart' as _i4;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:solar_energy_prediction/core/errors/failures.dart' as _i8;
import 'package:solar_energy_prediction/features/map/domain/entities/weather_data.dart'
    as _i9;
import 'package:solar_energy_prediction/features/map/domain/entities/weather_forecast.dart'
    as _i12;
import 'package:solar_energy_prediction/features/map/domain/use_cases/gps_services/is_gps_service_enabled_use_case.dart'
    as _i13;
import 'package:solar_energy_prediction/features/map/domain/use_cases/gps_services/request_gps_service_use_case.dart'
    as _i14;
import 'package:solar_energy_prediction/features/map/domain/use_cases/weather/get_weather_5_days_forecast_use_case.dart'
    as _i11;
import 'package:solar_energy_prediction/features/map/domain/use_cases/weather/get_weather_data_use_case.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationData_0 extends _i1.SmartFake implements _i2.LocationData {
  _FakeLocationData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i4.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.LocationData> get onLocationChanged => (super.noSuchMethod(
        Invocation.getter(#onLocationChanged),
        returnValue: _i5.Stream<_i2.LocationData>.empty(),
      ) as _i5.Stream<_i2.LocationData>);

  @override
  _i5.Future<bool> changeSettings({
    _i2.LocationAccuracy? accuracy = _i2.LocationAccuracy.high,
    int? interval = 1000,
    double? distanceFilter = 0.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeSettings,
          [],
          {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isBackgroundModeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isBackgroundModeEnabled,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> enableBackgroundMode({bool? enable = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableBackgroundMode,
          [],
          {#enable: enable},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.LocationData> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i5.Future<_i2.LocationData>.value(_FakeLocationData_0(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i5.Future<_i2.LocationData>);

  @override
  _i5.Future<_i2.PermissionStatus> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i5.Future<_i2.PermissionStatus>.value(
            _i2.PermissionStatus.granted),
      ) as _i5.Future<_i2.PermissionStatus>);

  @override
  _i5.Future<_i2.PermissionStatus> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i5.Future<_i2.PermissionStatus>.value(
            _i2.PermissionStatus.granted),
      ) as _i5.Future<_i2.PermissionStatus>);

  @override
  _i5.Future<bool> serviceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #serviceEnabled,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> requestService() => (super.noSuchMethod(
        Invocation.method(
          #requestService,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.AndroidNotificationData?> changeNotificationOptions({
    String? channelName,
    String? title,
    String? iconName,
    String? subtitle,
    String? description,
    _i6.Color? color,
    bool? onTapBringToFront,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeNotificationOptions,
          [],
          {
            #channelName: channelName,
            #title: title,
            #iconName: iconName,
            #subtitle: subtitle,
            #description: description,
            #color: color,
            #onTapBringToFront: onTapBringToFront,
          },
        ),
        returnValue: _i5.Future<_i2.AndroidNotificationData?>.value(),
      ) as _i5.Future<_i2.AndroidNotificationData?>);
}

/// A class which mocks [GetWeatherDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherDataUseCase extends _i1.Mock
    implements _i7.GetWeatherDataUseCase {
  MockGetWeatherDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, _i9.WeatherData>> call(
          _i10.LatLng? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, _i9.WeatherData>>.value(
            _FakeEither_1<_i8.Failure, _i9.WeatherData>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, _i9.WeatherData>>);
}

/// A class which mocks [GetWeather5DaysForecastUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeather5DaysForecastUseCase extends _i1.Mock
    implements _i11.GetWeather5DaysForecastUseCase {
  MockGetWeather5DaysForecastUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, _i12.WeatherForecast>> call(
          _i10.LatLng? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i8.Failure, _i12.WeatherForecast>>.value(
                _FakeEither_1<_i8.Failure, _i12.WeatherForecast>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, _i12.WeatherForecast>>);
}

/// A class which mocks [IsGpsServiceEnabledUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsGpsServiceEnabledUseCase extends _i1.Mock
    implements _i13.IsGpsServiceEnabledUseCase {
  MockIsGpsServiceEnabledUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, bool>> call(dynamic input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [RequestGpsServiceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestGpsServiceUseCase extends _i1.Mock
    implements _i14.RequestGpsServiceUseCase {
  MockRequestGpsServiceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, bool>> call(dynamic input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, bool>>);
}
